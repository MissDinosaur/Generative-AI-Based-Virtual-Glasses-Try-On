virtual-tryon-project/
â”œâ”€â”€ config/
â”‚   â””â”€â”€ database_config.py          # Database connection & credentials
â”œâ”€â”€ data_processing/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ dataset_downloader.py       # Download & extract SCUT dataset
â”‚   â””â”€â”€ selfie_processor.py         # Process & store selfies in DB
â”œâ”€â”€ database/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â””â”€â”€ table_creator.py            # Create selfies table schema
â”œâ”€â”€ core/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ virtual_tryon.py            # Main try-on algorithm & face detection
â”‚   â””â”€â”€ image_utils.py              # Image processing utilities
â”œâ”€â”€ demo/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â””â”€â”€ run_demo.py                 # Main demo script with database integration
â”œâ”€â”€ evaluation/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â””â”€â”€ accuracy_calculator.py      # Quality metrics & performance evaluation
â”œâ”€â”€ docs/
â”‚   â”œâ”€â”€ architecture_diagram.md     # System architecture & data flow
â”‚   â”œâ”€â”€ command_reference.md        # CLI commands & usage examples
â”‚   â””â”€â”€ executive_presentation.md   # CEO/Manager presentation content
â”œâ”€â”€ output/                         # Generated try-on results (auto-created)
â”œâ”€â”€ logs/                          # System logs (auto-created)
â”œâ”€â”€ temp/                          # Temporary files (auto-created)
â”œâ”€â”€ requirements.txt               # Python dependencies
â”œâ”€â”€ setup.py                       # Project setup & installation script
â”œâ”€â”€ simple_pipeline.py             # CLI interface for batch/single processing
â”œâ”€â”€ avai_data.py                   # Quick data exploration script
â”œâ”€â”€ details.py                     # Dataset download & extraction utility
â”œâ”€â”€ fix_table.py                   # Database schema repair utility
â”œâ”€â”€ project_structure.txt          # This file - project organization
â””â”€â”€ README.md                      # Project documentation & instructions

# Key Files Explained:
# ==================
# 
# ðŸš€ MAIN ENTRY POINTS:
#    â”œâ”€â”€ demo/run_demo.py           â†’ Complete demo with setup
#    â”œâ”€â”€ simple_pipeline.py         â†’ CLI for production use
#    â””â”€â”€ avai_data.py              â†’ Check available data
#
# ðŸ§  CORE ENGINE:
#    â”œâ”€â”€ core/virtual_tryon.py      â†’ Face detection + overlay algorithm
#    â”œâ”€â”€ core/image_utils.py        â†’ Image processing utilities
#    â””â”€â”€ evaluation/accuracy_calculator.py â†’ Quality metrics
#
# ðŸ’¾ DATA MANAGEMENT:
#    â”œâ”€â”€ data_processing/dataset_downloader.py â†’ SCUT dataset handling
#    â”œâ”€â”€ data_processing/selfie_processor.py   â†’ Database storage
#    â”œâ”€â”€ database/table_creator.py             â†’ Schema management
#    â””â”€â”€ config/database_config.py             â†’ DB connection
#
# ðŸ“Š OUTPUTS & RESULTS:
#    â”œâ”€â”€ output/                    â†’ Generated images (selfie_name + glasses_name.jpg)
#    â”œâ”€â”€ logs/                      â†’ System logs & debugging
#    â””â”€â”€ temp/                      â†’ Temporary processing files
#
# ðŸ“š DOCUMENTATION:
#    â”œâ”€â”€ docs/architecture_diagram.md    â†’ Technical architecture
#    â”œâ”€â”€ docs/command_reference.md       â†’ CLI usage guide
#    â”œâ”€â”€ docs/executive_presentation.md  â†’ Business presentation
#    â””â”€â”€ README.md                       â†’ Getting started guide
#
# ðŸ”§ UTILITIES:
#    â”œâ”€â”€ setup.py                   â†’ Automated project setup
#    â”œâ”€â”€ details.py                 â†’ Manual dataset download
#    â”œâ”€â”€ fix_table.py              â†’ Database repair tool
#    â””â”€â”€ requirements.txt           â†’ Dependencies list

# Sample Usage Commands:
# =====================
# 
# Setup:
#   python setup.py                              # Install dependencies
#   python demo/run_demo.py                      # Complete setup + demo
#
# Quick Operations:
#   python avai_data.py                          # Check available data
#   python simple_pipeline.py --mode single     # Single try-on
#   python simple_pipeline.py --mode batch --batch-size 10  # Batch processing
#
# Evaluation:
#   python evaluation/accuracy_calculator.py     # Quality assessment
#
# Output Files:
#   output/AF001_RayBan_Aviator_Classic.jpg     # Meaningful filenames
#   output/CM045_Oakley_Holbrook_Square.jpg     # selfie_name + glasses_name

